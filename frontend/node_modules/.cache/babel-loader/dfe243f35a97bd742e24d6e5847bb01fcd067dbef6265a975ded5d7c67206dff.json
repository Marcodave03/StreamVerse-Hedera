{"ast":null,"code":"var _jsxFileName = \"C:\\\\2. Code Repository\\\\200. Projects\\\\StreamVerse\\\\Hedera\\\\StreamVerse-Hedera\\\\frontend\\\\src\\\\components\\\\StreamContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// StreamContext.tsx\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StreamContext = /*#__PURE__*/createContext(undefined);\nexport const StreamProvider = ({\n  children\n}) => {\n  _s();\n  const [stream, setStream] = useState(null);\n  return /*#__PURE__*/_jsxDEV(StreamContext.Provider, {\n    value: {\n      stream,\n      setStream\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_s(StreamProvider, \"8WzrO1SK6RxfwLyaWvVKmZyPavI=\");\n_c = StreamProvider;\nexport const useStream = () => {\n  _s2();\n  const context = useContext(StreamContext);\n  if (!context) {\n    throw new Error('useStream must be used within a StreamProvider');\n  }\n  return context;\n};\n_s2(useStream, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"StreamProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","StreamContext","undefined","StreamProvider","children","_s","stream","setStream","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useStream","_s2","context","Error","$RefreshReg$"],"sources":["C:/2. Code Repository/200. Projects/StreamVerse/Hedera/StreamVerse-Hedera/frontend/src/components/StreamContext.tsx"],"sourcesContent":["// StreamContext.tsx\r\nimport React, { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\ninterface StreamContextType {\r\n  stream: MediaStream | null;\r\n  setStream: (stream: MediaStream | null) => void;\r\n}\r\n\r\nconst StreamContext = createContext<StreamContextType | undefined>(undefined);\r\n\r\nexport const StreamProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [stream, setStream] = useState<MediaStream | null>(null);\r\n\r\n  return (\r\n    <StreamContext.Provider value={{ stream, setStream }}>\r\n      {children}\r\n    </StreamContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useStream = () => {\r\n  const context = useContext(StreamContext);\r\n  if (!context) {\r\n    throw new Error('useStream must be used within a StreamProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO9E,MAAMC,aAAa,gBAAGL,aAAa,CAAgCM,SAAS,CAAC;AAE7E,OAAO,MAAMC,cAAiD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAqB,IAAI,CAAC;EAE9D,oBACEE,OAAA,CAACC,aAAa,CAACO,QAAQ;IAACC,KAAK,EAAE;MAAEH,MAAM;MAAEC;IAAU,CAAE;IAAAH,QAAA,EAClDA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACR,EAAA,CARWF,cAAiD;AAAAW,EAAA,GAAjDX,cAAiD;AAU9D,OAAO,MAAMY,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC7B,MAAMC,OAAO,GAAGpB,UAAU,CAACI,aAAa,CAAC;EACzC,IAAI,CAACgB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,SAAS;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}